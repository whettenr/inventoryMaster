extends layout

block content
    link(rel='stylesheet', href='#{location}/stylesheets/item.css')
    body
        .container
            include itemInfo
            form(action='#{location}/form', method='post' id='form')
                div
                    .row
                        .col-25
                            label(for='icn') ICN:
                        .col-75
                            input#icn(style='background-color: #f2f2f2; border: none; margin-top: 10px;', type='text', name='icn', placeholder='ICN', readonly="readonly", onclick='alert("this is not editable");' value='#{computer.ICN}')
                    .row
                        .col-25
                            label(for='employee') Employee:
                        .col-75
                            select#employee.selectpicker(name='employeeId', onchange="alert(\"You just changed who this was assigned to. Please update the Type.\")")
                                each employee in employees
                                    if(employee.EmployeeID === computer.EmployeeID)
                                        option(value=employee.EmployeeID name='#{employee.LastName} #{employee.FirstName}' selected) #{employee.LastName}, #{employee.FirstName}
                                    else
                                        option(value=employee.EmployeeID name='#{employee.LastName} #{employee.FirstName}')  #{employee.LastName}, #{employee.FirstName}

                    .row
                        .col-25
                            label(for='make') Make:
                        .col-75
                            select#make.custom-select.sources(name='make', onchange='refreshModelOptions()')
                                each makeOption in makeOptions
                                    if(makeOption.Make === computer.Make)
                                        option(value=makeOption.Make selected) #{makeOption.Make}
                                    else
                                        option(value=makeOption.Make) #{makeOption.Make}
                    .row
                        .col-25
                            label(for='model') Model:
                        .col-75
                            select#model.custom-select.sources(name='model', onchange='changeModel()')
                                each modelOption in modelOptions
                                    if(modelOption.Model === computer.Model)
                                        option(value=modelOption.Model selected) #{modelOption.Model}
                                    else
                                        option(value=modelOption.Model) #{modelOption.Model}
                    .row
                        .col-25
                            label(for='type') Type:
                        .col-75
                            select#type.custom-select.sources(name='type')
                                each typeOption in typeOptions
                                    if(typeOption.Type === computer.Type)
                                        option(value=typeOption.Type selected) #{typeOption.Type}
                                    else
                                        option(value=typeOption.Type) #{typeOption.Type}
                    .row
                        .col-25
                            label(for='notes') Notes:
                        .col-75
                            textarea#notes(name='notes', placeholder='Write something..', style='height:200px')
                                | #{computer.Notes}
                div
                    .row
                        .col-25
                            label(for='serialNumber') Serial Number:
                        .col-75
                            input#serialNumber(type='text', name='serialNumber', placeholder='Serial Number' value='#{computer.SerialNumber}')
                    .row
                        .col-25
                            label(for='serviceTag') Service Tag:
                        .col-75
                            input#serviceTag(type='text', name='serviceTag', placeholder='Service Tag' value='#{computer.ServiceTag}')
                    .row
                        .col-25
                            label(for='expressServiceCode') Express Service Code:
                        .col-75
                            input#expressServiceCode(type='text', name='expressServiceCode', placeholder='Express Service Code' value='#{computer.ExpressServiceCode}')
                    .row
                        .col-25
                            label(for='dateAcquired') Date Acquired:
                        .col-75
                            input#dateAcquired(type='date' name='dateAcquired', placeholder='Date Acquired' value='#{computer.DateAcquired}')
                    .row
                        .col-25
                            label(for='warranty') Warranty:
                        .col-75
                            input#warranty(type='date', name='warranty', placeholder='Warranty' value='#{computer.Warranty}')
                    .row
                        .col-25
                            label(for='homeCheckout') Home Checkout:
                        .col-75
                            if(computer.HomeCheckout === 'on')
                                label.switch
                                    input#homeCheckout(type='checkbox', name='homeCheckout', placeholder='Home Checkout' checked)
                                    span.slider.round
                            else
                                label.switch
                                    input#homeCheckout(type='checkbox', name='homeCheckout', placeholder='Home Checkout')
                                    span.slider.round
                    .row
                        .col-25
                            label(for='touch') Touch:
                        .col-75
                            if(hardware.Touch === 'on')
                                label.switch
                                    input#touch(type='checkbox', name='touch' checked)
                                    span.slider.round
                            else
                                label.switch
                                    input#touch(type='checkbox', name='touch')
                                    span.slider.round
                    .row
                        .col-25
                            label(for='screenResolution') Screen Resolution:
                        .col-75
                            input#screenResolution(type='text' name='screenResolution', placeholder='Ex. 3840x2160' value='#{hardware.ScreenResolution}')
                    .row
                        .col-25
                            label(for='processorType') Processor Type:
                        .col-75
                            input#processorType(type='text', name='processorType', placeholder='Processor Type' value='#{hardware.ProcessorType}')
                    .row
                        .col-25
                            label(for='processorSpeed') Processor Speed:
                        .col-75
                            input#processorSpeed(type='text', name='processorSpeed', placeholder='Processor Speed' value='#{hardware.ProcessorSpeed}')
                    .row
                        .col-25
                            label(for='memory') Memory:
                        .col-75
                            input#memory(type='text', name='memory', placeholder='Memory' value='#{hardware.Memory}')
                    .row
                        .col-25
                            label(for='hardDrive') Hard Drive:
                        .col-75
                            input#hardDrive(type='text', name='hardDrive', placeholder='Hard Drive' value='#{hardware.HardDrive}')
                    .row
                        .col-25
                            label(for='graphicsCard') Graphics Card:
                        .col-75
                            input#graphicsCard(type='text', name='graphicsCard', placeholder='Graphics Card' value='#{hardware.VCName}')
                div
                    .row
                        .col-25
                            label(for='history') History:
                        .col-75
                            textarea#history(name='history' style='height:200px' readonly='readonly')
                                | #{computer.History}
                    input(type='hidden' name='HardwareID' value='#{computer.HardwareID}')
    script.
        let icn = "#{computer.ICN}";
        let employee = "#{employee.FirstName} #{employee.LastName}";
        let make = "#{computer.Make}";
        let model = "#{computer.Model}";
        let type = "#{computer.Type}";
        let user = '#{user.name}';
        if (user === '') {
            user = '#{user.netId}';
        }


        let date = new Date();
        function goBack() {
            $("#cardInfo").css('display', 'block');
            $("#computerInfo").css('display', 'none');
        }
        function showMain() {
            $("#mainInfo").css('display', 'block');
            $("#otherInfo").css('display', 'none');
            $("#hardwareInfo").css('display', 'none');
            $("#historyInfo").css('display', 'none');

        }
        function showOther() {
            $("#mainInfo").css('display', 'none');
            $("#otherInfo").css('display', 'block');
            $("#hardwareInfo").css('display', 'none');
            $("#historyInfo").css('display', 'none');

        }
        function showHardware() {
            $("#mainInfo").css('display', 'none');
            $("#otherInfo").css('display', 'none');
            $("#hardwareInfo").css('display', 'block');
            $("#historyInfo").css('display', 'none');

        }
        function showHistory() {
            $("#mainInfo").css('display', 'none');
            $("#otherInfo").css('display', 'none');
            $("#hardwareInfo").css('display', 'none');
            $("#historyInfo").css('display', 'block');
        }

        function surplus() {
            $("#employee").val('300');

            alert("You just changed who this was assigned to. Please update the Type.");
        }

        function changeEmployee() {
            let history = $("#history").val();
            $("#history").val(history + date.toDateString() + ' Reassigned from ' + employee + ' to ' + $("#employee option:selected").attr('name') + ' by ' + user + ' \n');
        }
        function changeMake() {
            let history = $("#history").val();
            $("#history").val(history + date.toDateString() + ' Make changed from ' + make + ' to ' + $("#make").val() + ' by ' + user + ' \n');
        }
        function changeModel() {
            let history = $("#history").val();
            $("#history").val(history + date.toDateString() + ' Model changed from ' + model + ' to ' + $("#model").val() + ' by ' + user + ' \n');
        }
        function goBack() {
            $("#cardInfo").css('display', 'block');
            $("#computerInfo").css('display', 'none');
        }
        function showMain() {
            $("#mainInfo").css('display', 'block');
            $("#otherInfo").css('display', 'none');
            $("#hardwareInfo").css('display', 'none');
        }
        function showOther() {
            $("#mainInfo").css('display', 'none');
            $("#otherInfo").css('display', 'block');
            $("#hardwareInfo").css('display', 'none');
            $("#showOtherInfo").css('display', 'none');
            $("#showHardwareInfo").css('display', 'block');

        }
        function showHardware() {
            $("#mainInfo").css('display', 'none');
            $("#otherInfo").css('display', 'none');
            $("#hardwareInfo").css('display', 'block');
            $("#showHardwareInfo").css('display', 'none');
            $("#submit").css('display', 'block');

        }
        function newModel() {
            if ($("#model").val() === "Add a New Option") {
                let model = prompt("New Model:");
                if (model !== null && model !== "") {
                    console.log(model);
                    $("#model").append(new Option(model, model));
                    $("#model").val(model);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getProcessorOptions?model=" + $("#model").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#processorType").html(data);
                    newProcessorType();
                    newProcessorSpeed();
                    newMemory();
                    newHardDrive();
                });
            }
        }
        function newProcessorType() {
            if ($("#processorType").val() === "Add a New Option") {
                let add = prompt("New Processor Type:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#processorType").append(new Option(add, add));
                    $("#processorType").val(add);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getProcessorSpeedOptions?processorType=" + $("#processorType").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#processorSpeed").html(data);
                });
            }
        }
        function newProcessorSpeed() {
            if ($("#processorSpeed").val() === "Add a New Option") {
                let add = prompt("New Processor Speed:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#processorSpeed").append(new Option(add, add));
                    $("#processorSpeed").val(add);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getMemoryOptions?model=" + $("#model").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#memory").html(data);
                });
            }
        }
        function newMemory() {
            if ($("#memory").val() === "Add a New Option") {
                let add = prompt("New Memory:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#memory").append(new Option(add, add));
                    $("#memory").val(add);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getHardDriveOptions?model=" + $("#model").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#hardDrive").html(data);
                });
            }
        }
        function newHardDrive() {
            if ($("#hardDrive").val() === "Add a New Option") {
                let add = prompt("New Hard Drive:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#hardDrive").append(new Option(add, add));
                    $("#hardDrive").val(add);
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getGraphicsCardOptions?model=" + $("#model").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#graphicsCard").html(data);
                });
            }
        }
        function newGraphicsCard() {
            if ($("#graphicsCard").val() === "Add a New Option") {
                let add = prompt("New Hard Drive:");
                if (add !== null && add !== "") {
                    console.log(add);
                    $("#graphicsCard").append(new Option(add, add));
                    $("#graphicsCard").val(add);
                }
            }
        }
        function refreshModelOptions() {
            if ($("#make").val() === "Add a New Option") {
                let make = prompt("New Make:");
                if (make !== null && make !== "") {
                    console.log(make);
                    $("#make").append(new Option(make, make));
                    $("#make").val(make);
                    newModel();
                }
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "#{location}/getModelOptions?type=Computer&make=" + $("#make").val(),
                    data: {format: 'html'}
                }).done(function (data) {
                    $("#model").html(data);
                });
            }
        }

        function stopBounce(id) {
            console.log(id);
            $('#' + id.id).css('display', 'none');
        }

        function go() {
            if (employee !== $("#employee option:selected").attr('name')) {
                changeEmployee();
            }
            $("#form").submit();
        }